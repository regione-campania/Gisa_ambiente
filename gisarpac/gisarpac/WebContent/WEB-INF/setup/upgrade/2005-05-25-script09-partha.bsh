/*
  This is a beanshell script that performs maintenance on a given database
  connection (db) from ant upgradedb
*/
import java.util.*;
import org.aspcfs.modules.contacts.base.*;
import org.aspcfs.modules.accounts.base.*;
import org.aspcfs.modules.base.*;
import org.aspcfs.modules.relationships.base.*;

print("Inserting new contact history for all Relationships...");
OrganizationHistory history = null;
RelationshipTypeList typeList = null;
Organization firstOrg = null;
Organization secondOrg = null;
RelationshipList relationships = new RelationshipList();
  relationships.setCategoryIdMapsFrom(Constants.ACCOUNT_OBJECT);
//  relationships.setBuildDualMappings(true);
  relationships.buildList(db);
  print("the total number of relationship types in the system are "+ relationships.size());
  Iterator rt =  relationships.keySet().iterator();
  while(rt.hasNext()) {
    String relType = (String) rt.next();
    ArrayList tmpList = (ArrayList) relationships.get(relType);
    Iterator j =  tmpList.iterator();
    while (j.hasNext()) {
      Relationship relationship = (Relationship) j.next();
      if (relationship.getCategoryIdMapsTo() == Constants.ACCOUNT_OBJECT) {
        history = new OrganizationHistory();
        typeList = new RelationshipTypeList();
        typeList.setTypeId(relationship.getTypeId());
        typeList.buildList(db);
        if (typeList.size() == 1) {
          type = (RelationshipType) typeList.get(0);
          firstOrg = new Organization(db, relationship.getObjectIdMapsFrom());
          secondOrg = new Organization(db, relationship.getObjectIdMapsTo());
          history.setOrgId(relationship.getObjectIdMapsFrom());
          history.setLinkObjectId(OrganizationHistory.RELATIONSHIP);
          history.setLinkItemId(relationship.getId());
          history.queryRecord(db);
          if (history.getId() == -1) {
            history.setLevel(10);
            history.setModifiedBy(relationship.getModifiedBy());
            history.setEnteredBy(relationship.getEnteredBy());
            history.setEntered(relationship.getEntered());
            history.setModified(relationship.getModified());
            history.setEnabled(true);
            history.setStatus("INSERT");
            history.setType("Relationship");
            history.setDescription(type.getReciprocalName1()+" "+secondOrg.getName());
            print("First Organization History being entered is "+history.getDescription());
            history.insert(db);
          }
          history = new OrganizationHistory();
          history.setOrgId(relationship.getObjectIdMapsTo());
          history.setLinkObjectId(OrganizationHistory.RELATIONSHIP);
          history.setLinkItemId(relationship.getId());
          history.queryRecord(db);
          if (history.getId() == -1) {
            history.setLevel(10);
            history.setModifiedBy(relationship.getModifiedBy());
            history.setEnteredBy(relationship.getEnteredBy());
            history.setEntered(relationship.getEntered());
            history.setModified(relationship.getModified());
            history.setEnabled(true);
            history.setStatus("INSERT");
            history.setType("Relationship");
            history.setDescription(type.getReciprocalName2()+" "+firstOrg.getName());
            print("Second Organization history being entered is "+history.getDescription());
            history.insert(db);
          }
        }
      }
    }
  }
print("Completed inserting contact history");


