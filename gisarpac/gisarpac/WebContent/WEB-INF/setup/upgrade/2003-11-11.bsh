/*
  This is a beanshell script that performs maintenance on a given database 
  connection (db) from ant upgradedb
  
  Changes for externalizing the Employees Module
*/
import java.sql.*;
import org.aspcfs.modules.admin.base.Permission;
import org.aspcfs.modules.admin.base.PermissionCategory;

print("Adding Employee module if it doesn't exist");

//Check and insert the employee category
int employeeId = -1;
st = db.createStatement();
rs = st.executeQuery(
  "SELECT category_id " +
  "FROM permission_category " +
  "WHERE category = 'Employees'");
if (rs.next()) {
  employeeId = rs.getInt("category_id");
}
rs.close();
st.close();
//Insert the category if needed
if (employeeId == -1) {
  print("Category not found, inserting...");
  PermissionCategory thisCategory = new PermissionCategory();
  thisCategory.setCategory("Employees");
  thisCategory.setDescription(null);
  thisCategory.setLevel(999);
  thisCategory.setEnabled(true);
  thisCategory.setActive(true);
  thisCategory.setFolders(false);
  thisCategory.setLookups(true);
  thisCategory.setViewpoints(false);
  thisCategory.setCategories(false);
  thisCategory.setScheduledEvents(false);
  thisCategory.setObjectEvents(false);
  thisCategory.setReports(true);
  thisCategory.insert(db);
  employeeId = thisCategory.getId();
  //Insert the new employee access permission
  print("Inserting new Employee Access permission...");
  Permission thisPermission = new Permission();
  thisPermission.setCategoryId(thisCategory.getId());
  thisPermission.setName("employees");
  thisPermission.setView(true);
  thisPermission.setAdd(false);
  thisPermission.setEdit(false);
  thisPermission.setDelete(false);
  thisPermission.setDescription("Access to Employee module");
  thisPermission.setPermissionLevel(10);
  thisPermission.setEnabled(true);
  thisPermission.setActive(true);
  thisPermission.setViewpoints(false);
  thisPermission.insert(db);
  //Cleaning up permissions
  print("Adding access to Employee module if role previously had access to employee records");
  PreparedStatement pst = db.prepareStatement(
    "SELECT DISTINCT role_id " +
    "FROM role_permission " +
    "WHERE permission_id IN " +
    " (SELECT permission_id " +
    "  FROM permission " +
    "  WHERE permission = 'contacts-internal_contacts') " +
    " AND  role_view = ? ");
  pst.setBoolean(1, true);
  rs = pst.executeQuery();
  StringBuffer sb = new StringBuffer();
  while (rs.next()) {
    if (sb.length() > 0) {
      sb.append(",");
    }
    sb.append(String.valueOf(rs.getInt("role_id")));
  }
  rs.close();
  pst.close();
  if (sb.length() > 0) {
    print("Updating role permissions: " + sb.toString());
    //Insert the new permission for the role
    pst = db.prepareStatement(
      "INSERT INTO role_permission " +
      "(role_id, permission_id, role_view, role_add, role_edit, role_delete) " +
      "VALUES (?, ?, ?, ?, ?, ?) ");
    StringTokenizer st = new StringTokenizer(sb.toString(), ",");
    while (st.hasMoreTokens()) {
      int i = 0;
      pst.setInt(++i, Integer.parseInt(st.nextToken()));
      pst.setInt(++i, thisPermission.getId());
      pst.setBoolean(++i, true);
      pst.setBoolean(++i, false);
      pst.setBoolean(++i, false);
      pst.setBoolean(++i, false);
      pst.execute();
    }
    pst.close();
  }
}
//Move the previous employee permission, if necessary
print("Moving the existing employee permissions...");
PreparedStatement pst = db.prepareStatement(
  "UPDATE permission " +
  "SET category_id = ?, level = ? " +
  "WHERE permission = ?");
pst.setInt(1, employeeId);
pst.setInt(2, 20);
pst.setString(3, "contacts-internal_contacts");
pst.executeUpdate();
pst.close();

//Move the department list to Employees module
print("Moving the existing department lookup table...");
PreparedStatement pst = db.prepareStatement(
  "UPDATE lookup_lists_lookup " +
  "SET module_id = ?, lookup_id = ?, level = ?, category_id = ? " +
  "WHERE table_name = ?");
pst.setInt(1, employeeId);
pst.setInt(2, 1111031132);
pst.setInt(3, 10);
pst.setInt(4, 1111031131);
pst.setString(5, "lookup_department");
pst.executeUpdate();
pst.close();

print("Finished");


