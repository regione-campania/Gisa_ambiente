/*
  Parses the import-mappings.xml file and updates the base object sync table entries 
  to have a key attribute specified
*/

import java.sql.*;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import org.aspcfs.utils.XMLUtils;
import org.aspcfs.modules.service.base.SyncTable;
import org.aspcfs.modules.service.base.SyncSystem;

import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

URL mapFile = new URL(prefsURL.toString() + "cfs/transfer/import-mappings.xml");
if ("file".equals(mapFile.getProtocol())) {
  File file = new File(mapFile.getPath());
  if (!file.exists()) {
    mapFile = new URL(prefsURL.toString() + "import-mappings.xml");
  }
}

int systemId = SyncSystem.getSystemId(db, "CFSHttpXMLWriter");
print("System: " + systemId);
File configFile = new File(mapFile);
if (!configFile.exists()) {
  throw new SQLException("Config file not found: import-mappings.xml");
}

XMLUtils xml = new XMLUtils(configFile);

ArrayList mapElements = new ArrayList();
XMLUtils.getAllChildren(xml.getFirstChild("mappings"), "map", mapElements);

Iterator mapItems = mapElements.iterator();
while (mapItems.hasNext()) {
  //Get the map node
  Element mapping = (Element) mapItems.next();
  
  String id = (String) mapping.getAttribute("id");
  String className = (String) mapping.getAttribute("class");
  
  if (!className.equals("org.aspcfs.utils.web.LookupList") && 
      !className.equals("org.aspcfs.utils.web.CustomLookupList")) {
    
    SyncTable baseMap = new SyncTable();
    baseMap.setSystemId(systemId);
    baseMap.setName(id);
    baseMap.setKey("id");//all base objects should have getId() and setId()
    baseMap.updateKey(db);
    print("Updated Share Key Attribute-> ID: " + id + ", CLASS: " + className);
  }
}
